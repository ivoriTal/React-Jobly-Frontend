{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interacting with the API will be stored here.\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get a list of all companies. */\n  static async getCompanies() {\n    let res = await this.request(`companies`);\n    return res.companies;\n  }\n\n  /** Get a list of jobs. */\n  static async getJobs() {\n    let res = await this.request(`jobs`);\n    return res.jobs;\n  }\n\n  /** Apply for a job. */\n  static async applyToJob(jobId) {\n    const res = await this.request(`jobs/${jobId}/apply`, {}, \"post\");\n    return res;\n  }\n\n  /** Get user profile information. */\n  static async getUserProfile(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get a list of companies filtered by search term. */\n  static async searchCompanies(searchTerm) {\n    let res = await this.request(`companies`, {\n      search: searchTerm\n    });\n    return res.companies;\n  }\n\n  /** Log in a user. */\n  static async login(username, password) {\n    const res = await this.request(`auth/login`, {\n      username,\n      password\n    }, \"post\");\n    return res;\n  }\n\n  /** Sign up a new user. */\n  static async signup(username, password) {\n    const res = await this.request(`auth/register`, {\n      username,\n      password\n    }, \"post\");\n    return res;\n  }\n\n  /** Update user profile information. */\n  static async updateUserProfile(username, data) {\n    const res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  // obviously, you'll add a lot here ...\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCompany","handle","res","company","getCompanies","companies","getJobs","jobs","applyToJob","jobId","getUserProfile","username","user","searchCompanies","searchTerm","search","login","password","signup","updateUserProfile"],"sources":["C:/Users/Popa Pill/Downloads/react-jobly (fixed)/frontend/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interacting with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\") ? data : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Get a list of all companies. */\n  static async getCompanies() {\n    let res = await this.request(`companies`);\n    return res.companies;\n  }\n\n  /** Get a list of jobs. */\n  static async getJobs() {\n    let res = await this.request(`jobs`);\n    return res.jobs;\n  }\n\n  /** Apply for a job. */\n  static async applyToJob(jobId) {\n    const res = await this.request(`jobs/${jobId}/apply`, {}, \"post\");\n    return res;\n  }\n\n  /** Get user profile information. */\n  static async getUserProfile(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** Get a list of companies filtered by search term. */\n  static async searchCompanies(searchTerm) {\n    let res = await this.request(`companies`, { search: searchTerm });\n    return res.companies;\n  }\n\n  /** Log in a user. */\n  static async login(username, password) {\n    const res = await this.request(`auth/login`, { username, password }, \"post\");\n    return res;\n  }\n\n  /** Sign up a new user. */\n  static async signup(username, password) {\n    const res = await this.request(`auth/register`, { username, password }, \"post\");\n    return res;\n  }\n\n  /** Update user profile information. */\n  static async updateUserProfile(username, data) {\n    const res = await this.request(`users/${username}`, data, \"patch\");\n    return res.user;\n  }\n\n  // obviously, you'll add a lot here ...\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n    \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n    \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\nexport default JoblyApi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}